{"version":3,"sources":["components/Grid.tsx","components/RoundedBox.tsx","components/Error.tsx","components/Nominee.tsx","pages/Nomination.tsx","utils/useRequest.ts"],"names":["RowStyle","styled","div","p","gutter","align","css","Row","memo","props","className","React","Children","map","children","child","cloneElement","col","defaultProps","Col","points","totalCol","mediaStr","xs","sm","mediaQuery","md","lg","getWidthMedia","Wrapper","theme","colors","border","RoundedBox","IconWrapper","span","Error","Icon","icon","message","Name","h2","Percentage","Paragraph","Nominee","data","name","percentage","nric","scheme","Heading","h3","Button","RowSection","ColOverride","ContainerWrapper","Container","NomineeItem","InfoHeading","primary","NominationPage","useNomineesContext","nominees","request","url","options","useState","loading","setLoading","setData","error","setError","useEffect","controller","AbortController","fetch","process","method","headers","signal","then","resp","json","catch","err","abort","useMemo","useGetRequest","list","Array","from","length","_","index","placeholder","nominations","listTransitions","useTransition","item","opacity","enter","leave","position","hasNoData","Placeholder","as","height","account","dateFormatter","nominationDate","to","appearance","outline","EmptyFolderIcon","styles","key","style"],"mappings":"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","file":"static/js/4.aa5ca8a5.chunk.js","sourcesContent":["import React, { memo, FC } from 'react';\nimport styled, { css } from 'styled-components';\nimport { mediaQuery } from '../utils/helpers';\n\nconst RowStyle = styled.div<{ align?: 'center'; gutter?: number }>`\n  display: flex;\n  flex-wrap: wrap;\n  margin-left: -${(p) => p.gutter}rem;\n  margin-right: -${(p) => p.gutter}rem;\n\n  ${(p) =>\n    p.align &&\n    css`\n      align-items: center;\n    `}\n`;\n\ninterface RowProps {\n  gutter?: number;\n  col?: number;\n  children: React.ReactNode;\n  align?: 'center';\n  className?: string;\n}\n\nexport const Row: FC<RowProps> = memo((props) => {\n  return (\n    <RowStyle\n      align={props.align}\n      className={props.className}\n      gutter={props.gutter}\n    >\n      {React.Children.map(props.children, (child) =>\n        React.cloneElement(child as any, {\n          gutter: props.gutter,\n          col: props.col,\n        })\n      )}\n    </RowStyle>\n  );\n});\n\nRow.defaultProps = {\n  gutter: 1,\n  col: 12,\n};\n\nfunction getWidthMedia(points: Record<BerakPoints, number>, totalCol: number) {\n  let mediaStr = `\n    flex: 0 0 100%;\n    max-width: 100%;\n  `;\n\n  if (points.xs) {\n    mediaStr += `\n      flex: 0 0 ${(points.xs / totalCol) * 100}%;\n      max-width: ${(points.xs / totalCol) * 100}%;\n    `;\n  }\n\n  if (points.sm) {\n    mediaStr += `\n      ${mediaQuery('sm')} {\n        flex: 0 0 ${(points.sm / totalCol) * 100}%;\n        max-width: ${(points.sm / totalCol) * 100}%;\n      }\n    `;\n  }\n\n  if (points.md) {\n    mediaStr += `\n      ${mediaQuery('md')} {\n        flex: 0 0 ${(points.md / totalCol) * 100}%;\n        max-width: ${(points.md / totalCol) * 100}%;\n      }\n    `;\n  }\n\n  if (points.lg) {\n    mediaStr += `\n      ${mediaQuery('lg')} {\n        flex: 0 0 ${(points.lg / totalCol) * 100}%;\n        max-width: ${(points.lg / totalCol) * 100}%;\n      }\n    `;\n  }\n\n  return css`\n    ${mediaStr}\n  `;\n}\n\nexport const Col = styled.div<\n  {\n    gutter?: number;\n    col?: number;\n  } & Partial<Record<BerakPoints, number>>\n>`\n  padding: 0 ${(p) => `${p.gutter}rem`};\n  display: block;\n  ${(p) =>\n    getWidthMedia(\n      {\n        xs: p.xs,\n        sm: p.sm,\n        md: p.md,\n        lg: p.lg,\n      },\n      p.col\n    )}\n`;\n","import React, { memo } from 'react';\nimport styled from 'styled-components';\n\nconst Wrapper = styled.div`\n  border-radius: 8px;\n  box-shadow: 0 0 2px rgba(0, 0, 0, 0.1), 0 4px 12px rgba(0, 0, 0, 0.05);\n  padding: 2rem;\n  background-color: #fff;\n  border: 1px solid ${(p) => p.theme.colors.border};\n`;\n\nexport const RoundedBox = memo<{\n  className?: string;\n  children: React.ReactNode;\n}>((props) => {\n  return <Wrapper className={props.className}>{props.children}</Wrapper>;\n});\n","import { memo } from 'react';\nimport styled from 'styled-components';\n\nconst Wrapper = styled.div`\n  padding: 2rem;\n  text-align: center;\n`;\n\nconst IconWrapper = styled.span`\n  font-size: 5rem;\n  display: inline-block;\n\n  svg {\n    height: 1em;\n    display: block;\n  }\n`;\n\ninterface ErrorProps {\n  icon: React.FC | React.ComponentClass;\n  message: string | React.ReactNode;\n}\n\nexport const Error = memo<ErrorProps>(({ icon: Icon, ...props }) => {\n  return (\n    <Wrapper>\n      {\n        <IconWrapper>\n          <Icon />\n        </IconWrapper>\n      }\n      {typeof props.message == 'string' ? (\n        <p>{props.message}</p>\n      ) : (\n        props.message\n      )}\n    </Wrapper>\n  );\n});\n","import { memo } from 'react';\nimport styled from 'styled-components';\nimport { RoundedBox } from './RoundedBox';\n\nconst Name = styled.h2`\n  margin-top: 0;\n  display: flex;\n  justify-content: space-between;\n  word-break: break-word;\n`;\n\nconst Percentage = styled.span`\n  flex-shrink: 0;\n  margin-left: 0.5rem;\n`;\n\nconst Paragraph = styled.p`\n  &:last-of-type {\n    margin-bottom: 0;\n  }\n`;\n\ninterface NomineeProps {\n  className?: string;\n  data: Nominee;\n}\n\nexport const Nominee = memo<NomineeProps>((props) => {\n  return (\n    <RoundedBox className={props.className}>\n      <Name>\n        <span>{props.data.name}</span>\n        <Percentage>{`${props.data.percentage}%`}</Percentage>\n      </Name>\n      <Paragraph>{props.data.nric}</Paragraph>\n      <Paragraph>{props.data.scheme}</Paragraph>\n    </RoundedBox>\n  );\n});\n","import React, { memo, useMemo } from 'react';\nimport { useTransition } from 'react-spring';\nimport styled from 'styled-components';\nimport { Button, LinkButton } from '../components/Button';\nimport { Container } from '../components/Container';\nimport { Error } from '../components/Error';\nimport { Col, Row } from '../components/Grid';\nimport { EmptyFolderIcon } from '../components/Icons';\nimport { Nominee } from '../components/Nominee';\nimport { useNomineesContext } from '../components/NomineeContext';\nimport { Placeholder } from '../components/Placeholder';\nimport { dateFormatter } from '../utils/helpers';\nimport { useGetRequest } from '../utils/useRequest';\n\nconst Heading = styled.h3`\n  margin-top: 0;\n  margin-bottom: 0.4em;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 1rem;\n\n  ${Button} {\n    font-size: 1rem;\n  }\n`;\n\nconst RowSection = styled(Row)`\n  margin-bottom: 2rem;\n`;\n\nconst ColOverride = styled(Col)`\n  margin-bottom: 1rem;\n`;\n\nconst ContainerWrapper = styled(Container)`\n  margin-top: 2rem;\n\n  hr {\n    margin: 1rem 0;\n  }\n`;\n\nconst NomineeItem = styled(Nominee)`\n  margin-bottom: 1rem;\n`;\n\nconst InfoHeading = styled.h3`\n  font-weight: 400;\n  color: ${(p) => p.theme.colors.primary};\n  margin-bottom: 0.5rem;\n  margin-top: 0;\n  font-size: 1rem;\n\n  + p {\n    margin-top: 0;\n  }\n`;\n\ntype NomineeAndPlaceholder = Partial<Nominee> & { placeholder: boolean };\n\nexport const NominationPage = memo((props) => {\n  const [nominees] = useNomineesContext();\n  const request = useGetRequest<NominationAccount>('/nomination');\n\n  const list = React.useMemo(() => {\n    if (request.loading) {\n      return Array.from({ length: 3 }).map((_, index) => ({\n        name: `${index}`,\n        placeholder: true,\n      })) as NomineeAndPlaceholder[];\n    }\n\n    return [\n      ...nominees,\n      ...(request.data?.nominations || []),\n    ] as NomineeAndPlaceholder[];\n  }, [request.loading, request.data, nominees]);\n\n  const listTransitions = useTransition(list, (item) => item.name, {\n    from: { opacity: 0 },\n    enter: { opacity: 1 },\n    leave: { opacity: 0, position: request.loading ? 'static' : 'absolute' },\n  });\n\n  const hasNoData = useMemo(() => !request.loading && !(list.length > 0), [\n    request.loading,\n    list,\n  ]);\n\n  return (\n    <>\n      <ContainerWrapper>\n        <h3>Nomination details</h3>\n        <Row>\n          <ColOverride sm={6} md={3}>\n            <InfoHeading>CPF Account</InfoHeading>\n            <p>\n              {request.loading ? (\n                <Placeholder as=\"span\" height={20} />\n              ) : (\n                <strong>{request.data?.account || '--'}</strong>\n              )}\n            </p>\n          </ColOverride>\n          <ColOverride sm={6} md={3}>\n            <InfoHeading>Nomination Date</InfoHeading>\n            <p>\n              {request.loading ? (\n                <Placeholder as=\"span\" height={20} />\n              ) : (\n                <strong>\n                  {dateFormatter(request.data?.nominationDate) || '--'}\n                </strong>\n              )}\n            </p>\n          </ColOverride>\n        </Row>\n        <hr />\n        <RowSection>\n          <Col md={8}>\n            <Heading>\n              <span>Nominees</span>\n              <LinkButton\n                to=\"/nomination/add\"\n                appearance=\"primary\"\n                outline={false}\n              >\n                Add\n              </LinkButton>\n            </Heading>\n            {hasNoData && <Error icon={EmptyFolderIcon} message=\"No data\" />}\n            {listTransitions.map(({ props: styles, key, item }) => {\n              if (item.placeholder) {\n                return <Placeholder height={145} key={key} style={styles} />;\n              }\n\n              return <NomineeItem key={item.name} data={item as any} />;\n            })}\n          </Col>\n        </RowSection>\n      </ContainerWrapper>\n    </>\n  );\n});\n\nexport default NominationPage;\n","import { useEffect, useMemo, useState } from 'react';\n\nconst API_URL =\n  process.env.REACT_APP_API_URL ||\n  'https://nomination-server-assignment.herokuapp.com/api';\n\nexport function useGetRequest<T>(url: string, options?: RequestInit) {\n  const [loading, setLoading] = useState(false);\n  const [data, setData] = useState<T>(null);\n  const [error, setError] = useState<Error>(null);\n\n  useEffect(() => {\n    setLoading(true);\n\n    const controller = new AbortController();\n    fetch(`${API_URL}${url}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      signal: controller.signal,\n    })\n      .then((resp) => {\n        return resp.json();\n      })\n      .then((data) => {\n        setData(data);\n        setLoading(false);\n        setError(null);\n      })\n      .catch((err) => {\n        setData(null);\n        setLoading(false);\n        setError(new Error(err));\n      });\n\n    return () => {\n      controller.abort();\n    };\n  }, [url]);\n\n  return useMemo(() => ({ loading, data, error }), [loading, data, error]);\n}\n"],"sourceRoot":""}